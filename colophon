#!/usr/bin/env python3
"""
Colophon - File Quality Control Validator
"""
import os
import sys
import logging
import json
import tempfile
import click
import app
# Add current path to sys path for loading libraries
app.install_path = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, app.install_path)

CONTEXT_SETTINGS = {
    'help_option_names': ['-h', '--help']
}

@click.command(context_settings=CONTEXT_SETTINGS)
@click.option('-m', '--manifest', required=True, type=str, metavar='MNFST',
    help="The file manifest as CSV file; first row defines labels for each column")
@click.option('-s', '--suite', required=True, type=str, metavar='SUITE',
    help="The suite file defining files to match and what stages to run")
@click.option('-d', '--dir', 'sourcedir', required=True, type=str, metavar='DIR',
    help="The source directory in which to find files defined by the suite and manifest")
@click.option('-w', '--workdir', type=str, metavar='WORKDIR',
    help="A directory where to store temp files and results")
@click.option('-r', '--retry', type=str, metavar='ZIP',
    help="Re-run failed suite stages from the provided output zip file")
@click.option('-i', '--ignore-missing', is_flag=True,
    help="Ignore manifest entries that have no files matched.")
@click.option('-t', '--strict', is_flag=True,
    help="Exit code 0 only with no manifest entries skipped and no unassociated files")
@click.option('-v', '--verbose', is_flag=True,
    help="Provide details output while running")
@click.option('-q', '--quiet', is_flag=True,
    help="Suppress output while running")
# pylint: disable=too-many-arguments
def main(manifest, suite, sourcedir, workdir, retry, ignore_missing, strict, verbose, quiet):
    """Colophon - File Quality Control Validator"""
    # Create output dir if not provided
    if workdir is not None:
        app.workdir = os.path.abspath(workdir)
        if len(os.listdir(app.workdir)) != 0:
            raise app.ColophonException(f"Work directory must be empty: {workdir}")
    else:
        app.workdir = tempfile.mkdtemp()

    # Configure logging
    file_handler = logging.FileHandler(os.path.join(app.workdir, 'colophon.log'))
    stderr_handler = logging.StreamHandler()
    stderr_handler.setLevel(
        logging.DEBUG if verbose else (logging.ERROR if quiet else logging.INFO)
    )
    logging.basicConfig(
        format="%(asctime)s [%(levelname)s] %(message)s",
        encoding='utf-8',
        level=logging.DEBUG,
        handlers=[file_handler, stderr_handler]
    )
    app.logger = logging.getLogger()

    # Manifest exists and is loadable
    app.manifest = app.Manifest(manifest)
    # Suite file exists and is loadable
    app.suite = app.Suite(suite)
    # Source dir exists and is readable
    app.sourcedir = app.Directory(sourcedir)

    # Populate results JSON with empty dict
    results_path = os.path.join(app.workdir, 'results.json')
    with open(results_path, 'w', encoding='utf8') as results_file:
        json.dump({}, results_file)
    app.globalctx['results_path'] = results_path

    # TODO Retry failures from previous run
    retry # pylint: disable=pointless-statement

    job = app.ColophonJob()
    job.apply_filters()
    job.label_files(ignore_missing)
    job.run_stages()
    exit_code = job.generate_reports(strict, ignore_missing)
    print(job.zip_output())
    return exit_code

if __name__ == "__main__":
    # pylint: disable=no-value-for-parameter
    sys.exit(main())
