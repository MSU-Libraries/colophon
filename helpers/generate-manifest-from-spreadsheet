#!/usr/bin/env python3
import argparse
import csv
import yaml
import os
import time
import subprocess
import sys
import tempfile
import shutil
import collections

# Dependencies: libreoffice-common

if not shutil.which('libreoffice'):
    print("LibreOffice is required to perform this conversion.")
    print("On Debian/Ubuntu, you can install this via:")
    print("  apt install -y libreoffice-common")
    sys.exit(1)

def stderr(*args, **kwargs):
    """
    Like print(), but to stderr
    """
    print(*args, file=sys.stderr, **kwargs)

def main():
    apar = argparse.ArgumentParser(prog='generate-manifest-from-excel',
    description="""Create a colophon manifest from an Excel/CSV file
    """)
    apar.add_argument('-m','--mapfile', type=str, metavar='MAPFILE',
            help='a JSON mapping file used to parse specific columns and rows from the ' \
                 'spreadsheet')
    apar.add_argument('-s','--spreadsheet', type=str, metavar='SPREADSHEET',
            help='a spreadsheet file to use as source for creating the manifest; may be ' \
                 'any common spreadsheet format')
    apar.add_argument('-k','--skip', type=int, metavar='ROWS', default=None,
            help='skip a number of rows from the start of the spreadsheet')
    apar.add_argument('-o','--output', type=str, metavar='MANIFEST',
            help='the manifest CSV file to save; will be auto-named if not specified')
    if len(sys.argv) == 1:
        apar.print_help()
        sys.exit(0)
    pargs = apar.parse_args()

    mappings = read_yaml(pargs.mapfile)
    if not mappings:
        stderr(f"Unable to read mapping file: {pargs.mapfile}")
        sys.exit(1)
    default_skip = int(mappings['skiprows'] if 'skiprows' in mappings else 0)
    spreads = read_spreadsheet(pargs.spreadsheet, pargs.skip if pargs.skip is not None else default_skip)
    if not spreads:
        stderr(f"Unable to read spreadsheet: {pargs.spreadsheet}")
        sys.exit(1)
    manifest_path = pargs.output if pargs.output else generate_manifest_filename(pargs.spreadsheet)
    if not manifest_path:
        stderr(f"Unable to identify location to safe manifest to. Try passing and --output flag.")
        sys.exit(1)
    print(f"Generating {manifest_path} from {pargs.spreadsheet} using mappings from {pargs.mapfile}")
    generate_manifest(spreads, mappings, manifest_path)

def generate_manifest(rows, mapping, outfile):
    """
    Loop over rows and write manifest CSV file using provided mapping
    """
    with open(outfile, 'w', newline='') as csvf:
        csvout = csv.writer(csvf, quoting=csv.QUOTE_ALL)
        # Write out the header row with labels from mapping file
        csvout.writerow([col['label'] for col in mapping['columns']])

        # Find column indices to pull
        indices = [column_letter_to_index(col['column']) for col in mapping['columns']]
        try:
            for row in rows:
                csvout.writerow([row[idx] for idx in indices])
        except IndexError as exc:
            stderr("Spreadsheet does not have the columns specified in the manifest.")
            raise exc

def generate_manifest_filename(src_filename: str):
    """
    Create an unused filename based off a source filename to use
    as a manifest CSV filename.
    args:
        src_filename: A filename for the manifest filename to look like
    returns:
        string|None: A full filepath to an unused CSV filename, or
                     None if no filepath could be found.
    """
    dirname = os.path.dirname(os.path.realpath(src_filename))
    filebase = os.path.basename(src_filename)
    try:
        filebase = os.path.splitext(filebase)[0]
    except IndexError:
        pass

    manifest_path = None
    for inc in range(0, 99):
        apnd = f'_{inc}' * bool(inc)
        manifest_path = os.path.join(dirname, filebase + apnd + '.csv')
        if not os.path.exists(manifest_path):
            break
    return manifest_path

def exec_command(cmd: str|list, shell: bool=False, redirect_stderr: bool=False):
    """
    Run the given command or shell commands.
    args:
        cmd: The command and arguments
        shell: If set to true, then the command will be shell interpreted
        redirect_stderr: If set to true, then redirect stderr to stdout
    returns:
        tuple(int, list, list): Exit code, stdout lines as list, stderr lines as list
    """
    cmd = cmd if isinstance(cmd, list) else ([cmd] if shell else cmd.split())
    stderr_tgt=subprocess.STDOUT if redirect_stderr else subprocess.PIPE
    proc = subprocess.Popen(cmd, shell=shell, stdout=subprocess.PIPE, stderr=stderr_tgt)
    stdout, stderr = proc.communicate()
    return proc.returncode, stdout.splitlines(), [] if not stderr else stderr.splitlines()

def read_yaml(filename: str):
    """
    Attempt to load a YAML/JSON file and return the loaded results.
    args:
        filename: The file to load
    returns:
        any|None: The loaded data object or None if the file could not be loaded.
    """
    loaded_yaml = None
    try:
        with open(filename) as jsf:
            loaded_yaml = yaml.load(jsf, yaml.CLoader)
    except (yaml.YAMLError, OSError, TypeError):
        pass
    return loaded_yaml

def read_spreadsheet(filename: str, skip_rows: int=0):
    """
    Given an filename, attempt to read in the values from the spreadsheet.
    If file is not a CSV, will attempt convert to a temporary CSV beforehand.
    args:
        filename: The file to read from
        skip_rows: Number of header rows to skip
    returns:
        list(list)|None: A list of rows, each containing a list of cell values.
                         Or None on failure.
    """
    loaded_csv = None
    with tempfile.TemporaryDirectory() as tdir:
        csv_filename = filename
        ecode = 0
        if filename and not filename.lower().endswith(".csv"):
            ecode, _, _ = exec_command([
                "libreoffice", "--headless", "--infilter=CSV:44,34,76",
                "--convert-to", "csv", filename, "--outdir", tdir
            ])
            csv_filename = os.path.join(
                tdir,
                os.path.splitext(os.path.basename(filename))[0] + ".csv"
            )
        # Allow time for CSV file to finish saving
        time.sleep(1)

        if csv_filename and ecode == 0:
            with open(csv_filename) as readcsv:
                loaded_csv = [row for row in csv.reader(readcsv)]
            loaded_csv = loaded_csv[skip_rows:]
    return loaded_csv

def column_letter_to_index(letter):
    """
    Convert a spreadshet column letter into a 0 based
    index number for columns.
    E.g.
        'a' => 0, 'b' => 1, 'z' => 25
    """
    return ord(letter) - 97

if __name__ == "__main__":
    sys.exit(main())
