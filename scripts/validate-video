#!/bin/bash

# Dependencies: jq, mediainfo

SCRIPT_NAME=$(basename -- "$0")
runhelp() {
    echo ""
    echo "Usage: $SCRIPT_NAME [FLAGS]"
    echo ""
    echo "  Verify properties of a video stream"
    echo ""
    echo "FLAGS:"
    echo "  -c|--check-file FILE"
    echo "      The file to validate."
    #TODO not implemented
    #echo "  -i|--index IDX (default: 0)"
    #echo "      The video to pull from the file, where 0 is the first video."
    echo "  -d|--dimensions DIMS  (e.g. 1920x1080, 5460x3776)"
    echo "      The dimensions of the video expected. **"
    echo "  -b|--bitdepth DEPTH (e.g. 8, 10)"
    echo "      Expected bit depth of color channels. **"
    echo "  -J|--json JSON"
    echo "      Write results to the file JSON."
    echo "  -v|--verbose"
    echo "      Display verbose output."
    echo "  **  Flag can be set multiple times. If set more than once, any of the"
    echo "      specified flags' values will be permitted."
    echo ""
}

if [[ -z "$1" || $1 == "help" ]]; then
    runhelp
    exit 1
fi

###############################
## Check if array contains a given value
##  $1 -> Name of array to search
##  $2 -> Value to find
## Returns 0 if an element matches the value to find
array_contains() {
    local ARRNAME="$1[@]"
    local NEEDLE="$2"
    for HAY in "${!ARRNAME}"; do
        if [[ "$NEEDLE" == "$HAY" ]]; then
            return 0
        fi
    done
    return 1
}

# Set defaults
default_args() {
    declare -g CHECK_FILE=
    declare -g IDX=0
    declare -g -a DIMENS=()
    declare -g -a BDEPTHS=()
    declare -g JSON=
    declare -g VERBOSE=0
}

# Parse command arguments
parse_args() {
    # Parse flag arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
        -c|--check-file)
            CHECK_FILE="$2"
            if [[ ! -f "${CHECK_FILE}" ]]; then
                die 3 "File to check does not exist: $2"
            fi
            shift; shift ;;
        -i|--index)
            IDX="$2"
            shift; shift ;;
        -d|--dimensions)
            if ! [[ "$2" =~ ^[1-9][0-9]*+x[1-9][0-9]*$ ]]; then
                die 5 "Invalid --dimensions format. Must be WIDTHxHEIGHT using positive integers. Invalid value: $2"
            fi
            DIMENS+=("${2,,}")
            shift; shift ;;
        -b|--bitdepth)
            if ! [[ "$2" =~ ^[1-9][0-9]*$ ]]; then
                die 5 "Invalid --bitdepth value. Must be a positive integer. Invalid value: $2"
            fi
            BDEPTHS+=("${2}")
            shift; shift ;;
        -J|--json)
            JSON="$2"
            shift; shift ;;
        -v|--verbose)
            VERBOSE=1
            shift ;;
        -h|--help)
            runhelp
            exit 1
            ;;
        *)
            die 5 "Error: Unknown flag: $1"
        esac
    done

    required_flags

    # Validate video stream index selected
    #TODO not implemented
    #if [[ -z "${IDX}" ]]; then
    #    verbose "No index provided. Assuming: ${IDX}"
    #elif ! [[ "$IDX" =~ ^[0-9]+$ ]]; then
    #    die 5 "Value for --index must be a non-negative integer. Invalid value: $IDX"
    #fi
}

verbose() {
    MSG="$1"
    if [[ "${VERBOSE}" -eq 1 ]]; then
        echo "${MSG}"
    fi
}

stderr() {
    1>&2 echo "$1"
}

die() {
    stderr "$2"
    exit $1
}

required_flags() {
    if [[ -z "${CHECK_FILE}" ]]; then
        die 5 "Failure: Missing required flag --check-file"
    fi
    if [[ "${#DIMENS[@]}" -eq 0 && "${#BDEPTHS[@]}" -eq 0 ]]; then
        die 5 "Failure: Nothing set to be validated. See --help for options."
    fi
}

bool() {
    if [[ "$1" -eq 1 || "$1" == "" ]]; then
        echo "false"
    else
        echo "true"
    fi
}

main() {
    VERIFIED=0
    MEDIAINFO=$( mediainfo -f --Output=JSON "$CHECK_FILE" )

    # Verify dimensions
    if [[ "${#DIMENS[@]}" -gt 0 ]]; then
        verbose "Verifying dimensions are within allowed values: ${DIMENS[*]}"
        DIMEN=$( echo "$MEDIAINFO" | jq -jr '.media.track[] | select(."@type" == "Video") | .Width, "x", .Height' )
        verbose "Detected file dimensions: $DIMEN"
        DIMEN_VERIFIED=1
        if array_contains DIMENS "$DIMEN"; then
            DIMEN_VERIFIED=0
        fi
        VERIFIED=$(( VERIFIED | DIMEN_VERIFIED ))
    fi

    # Verify bit depth
    if [[ "${#BDEPTHS[@]}" -gt 0 ]]; then
        verbose "Verifying bit depth is one of allowed values: ${BDEPTHS[*]}"
        BDEPTH=$( echo "$MEDIAINFO" | jq -r '.media.track[] | select(."@type" == "Video") | .BitDepth' )
        verbose "Detected bit depth: $BDEPTH"
        BDEPTH_VERIFIED=1
        if array_contains BDEPTHS "$BDEPTH"; then
            BDEPTH_VERIFIED=0
        fi
        VERIFIED=$(( VERIFIED | BDEPTH_VERIFIED ))
    fi

    # Update JSON if provided
    if [[ -n "${JSON}" ]]; then
        if [[ ! -e "${JSON}" ]]; then
            verbose "Creating new JSON file ${JSON} with $SCRIPT_NAME results."
            echo "{}" > "${JSON}" || die 5 "Could not write to JSON file: ${JSON}"
        else
            verbose "Updating JSON file ${JSON} with $SCRIPT_NAME results."
        fi
        read -r -d '' JQ_ARG <<- EOF
			."validate-video" |= .+ [{
				image: "${CHECK_FILE}",
				index: "${IDX}",
				verified: $( bool $VERIFIED ),
				dimensions: {
					allowed: "${DIMENS[*]}",
					found: "${DIMEN}",
				},
				bitdepth: {
					allowed: "${BDEPTHS[*]}",
					found: "${BDEPTH}",
				},
			}]
			EOF
        jq "$JQ_ARG" "$JSON" | sponge "$JSON"
    fi

    # Exit success only if a check occured and there was no mismatch
    if [[ $VERIFIED -eq 0 ]]; then
        verbose "Video verified okay."
        exit 0
    fi
    verbose "Video verification failed!"
    exit 1
}

# Parse and start running
default_args
parse_args "$@"
main
